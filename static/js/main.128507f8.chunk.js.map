{"version":3,"sources":["components/Choices.js/Choices.js","components/Ingredients/Ingredients.js","components/Results/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Choices","handleSubmit","choices","name","useState","Array","length","fill","checkedState","setCheckedState","class","className","map","index","type","id","value","checked","onChange","position","updatedCheckedState","item","handleOnChange","htmlFor","onClick","Ingredients","videoRef","useRef","photoRef","hasPhoto","setHasPhoto","useEffect","navigator","mediaDevices","getUserMedia","video","width","height","then","stream","current","srcObject","play","catch","err","console","error","ingredients","setIngredients","classname","ref","photo","getContext","drawImage","dataUrl","toDataURL","log","Tesseract","recognize","logger","m","text","data","e","target","Results","selectedChoices","setData","loading","setLoading","setError","a","fetch","response","ok","Error","status","json","actualData","message","getData","choice","dairyIngredients","toString","addedSugarIngredients","shellfishIngredients","App","step","setStep","setSelectedChoices","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.128507f8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Choices = ({ handleSubmit }) => {\n  const choices = [\n    {\n      name: \" Added Sugar\",\n    },\n    {\n      name: \" Dairy\",\n    },\n    {\n      name: \" Shellfish\",\n    },\n  ];\n  const [checkedState, setCheckedState] = useState(\n    new Array(choices.length).fill(false)\n  );\n\n  const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n\n    setCheckedState(updatedCheckedState);\n  };\n\n  return (\n    <div class=\"wrapper1\">\n      <div class=\"padding\">\n        <div class=\"listDiv\">\n          <h3>\n            <b>What should we look out for?</b>\n          </h3>\n          <hr class=\"solid\"></hr>\n          <ul className=\"choice-list\">\n            {choices.map(({ name }, index) => {\n              return (\n                <li key={index}>\n                  <div className=\"choices-list-item\">\n                    <div className=\"left-section\">\n                      <input\n                        type=\"checkbox\"\n                        id={`custom-checkbox-${index}`}\n                        name={name}\n                        value={name}\n                        checked={checkedState[index]}\n                        onChange={() => handleOnChange(index)}\n                      />\n                      <label htmlFor={`custom-checkbox-${index}`}>{name}</label>\n                    </div>\n                  </div>\n                  <hr class=\"dashed\"></hr>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        <button\n          onClick={() => {\n            handleSubmit(checkedState);\n          }}\n        >\n          Onto the scanning!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Choices;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Tesseract from \"tesseract.js\";\n\nfunction preprocessImage(canvas) {\n  const image = canvas\n    .getContext(\"2d\")\n    .getImageData(0, 0, canvas.width, canvas.height);\n  thresholdFilter(image.data, 0.5);\n  return image;\n}\n\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\nfunction thresholdFilter(pixels, level) {\n  if (level === undefined) {\n    level = 0.5;\n  }\n  const thresh = Math.floor(level * 255);\n  for (let i = 0; i < pixels.length; i += 4) {\n    const red = pixels[i];\n    const green = pixels[i + 1];\n    const blue = pixels[i + 2];\n\n    const gray = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n    let value;\n    if (gray >= thresh) {\n      value = 255;\n    } else {\n      value = 0;\n    }\n    pixels[i] = pixels[i + 1] = pixels[i + 2] = value;\n  }\n}\n\nconst Ingredients = ({ handleSubmit }) => {\n  const videoRef = useRef(null);\n  const photoRef = useRef(null);\n\n  const [hasPhoto, setHasPhoto] = useState(false);\n\n  const getVideo = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: { width: 1920, height: 1080 },\n      })\n      .then((stream) => {\n        let video = videoRef.current;\n        video.srcObject = stream;\n        video.play();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    getVideo();\n  }, [videoRef]);\n\n  const takePhoto = () => {\n    const width = 414;\n    const height = width / (16 / 9);\n\n    let video = videoRef.current;\n    let photo = photoRef.current;\n\n    photo.width = width;\n    photo.height = height;\n\n    //const canvas = photoRef.current;\n    let ctx = photo.getContext(\"2d\");\n    //ctx.putImageData(preprocessImage(canvas), 0, 0);\n    //const dataUrl = canvas.toDataURL(\"image/jpeg\");\n\n    ctx.drawImage(video, 0, 0, width, height);\n    setHasPhoto(true);\n  };\n\n  const handleClick = () => {\n    let photo = photoRef.current;\n    const dataUrl = photo.toDataURL();\n    console.log(dataUrl);\n\n    Tesseract.recognize(dataUrl, \"eng\", { logger: (m) => console.log(m) })\n      .catch((err) => {\n        console.error(err);\n      })\n      .then(({ data: { text } }) => {\n        console.log(text);\n        //setIngredients(text);\n        handleSubmit(text);\n      });\n  };\n\n  const [ingredients, setIngredients] = useState(\"\");\n\n  const handleChange = (e) => {\n    setIngredients(e.target.value);\n  };\n\n  return (\n    <div class=\"wrapper2\">\n      <div class=\"padding\">\n        <div classname=\"camera\">\n          <video ref={videoRef}></video>\n          <button class=\"submitBtn\" onClick={takePhoto}>\n            Take pic!\n          </button>\n        </div>\n        <div className={\"result\" + (hasPhoto ? \"hasPhoto\" : \"\")}>\n          <canvas ref={photoRef}></canvas>\n        </div>\n        <button onClick={handleClick}> Convert </button>\n        <form>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              value={ingredients}\n              onChange={handleChange}\n              name=\"name\"\n            />\n          </label>\n          <input\n            type=\"submit\"\n            value=\"Next\"\n            onClick={() => {\n              handleSubmit(ingredients);\n            }}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Ingredients;\n","import React, { useState, useEffect } from \"react\";\n\nconst Results = ({ selectedChoices, ingredients }) => {\n  const API_URL = \"http://localhost:3001\";\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const response = await fetch(\n          `${API_URL}/api?ingredients=${ingredients}`\n        );\n        if (!response.ok) {\n          throw new Error(\n            `This is an HTTP error: The status is ${response.status}`\n          );\n        }\n        let actualData = await response.json();\n        setData(actualData);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, []);\n\n  return (\n    <div class=\"wrapper3\">\n      <div class=\"padding\">\n        <h1>Results</h1>\n        {loading && <div>A moment please...</div>}\n        {error && (\n          <div>{`There is a problem fetching the post data - ${error}`}</div>\n        )}\n        {selectedChoices.map((choice) => {\n          if (choice.value && data.dairyIngredients && choice.name == \"dairy\") {\n            return (\n              <div>\n                <div>{choice.name}</div>\n                We found <b>{data.dairyIngredients.length}</b> ingredients\n                flagged as dairy!\n                {data.dairyIngredients.toString()}\n              </div>\n            );\n          } else if (\n            choice.value &&\n            data.addedSugarIngredients &&\n            choice.name == \"added sugar\"\n          ) {\n            return (\n              <p>\n                {choice.name}\n                We found {data.addedSugarIngredients.length} ingredients flagged\n                as added sugar!\n                {data.addedSugarIngredients.toString()}\n              </p>\n            );\n          } else if (\n            choice.value &&\n            data.shellfishIngredients &&\n            choice.name == \"shellfish\"\n          ) {\n            return (\n              <p>\n                {choice.name}\n                We found {data.shellfishIngredients.length} ingredients flagged\n                as shellfish!\n                {data.shellfishIngredients.toString()}\n              </p>\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Results;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Choices from \"./components/Choices.js/Choices\";\nimport Ingredients from \"./components/Ingredients\";\nimport Results from \"./components/Results\";\nimport \"./components/fonts.css\";\nimport \"../src/components/Ingredients/index.css\";\n\nconst App = () => {\n  const [step, setStep] = useState(1);\n  const [selectedChoices, setSelectedChoices] = useState([]);\n  const [ingredients, setIngredients] = useState(\"\");\n\n  const handleSubmitChoices = (choices) => {\n    setStep(step + 1);\n    setSelectedChoices([\n      { name: \"added sugar\", value: choices[0] },\n      { name: \"dairy\", value: choices[1] },\n      { name: \"shellfish\", value: choices[2] },\n    ]);\n  };\n\n  const handleSubmitIngredients = (ingredients) => {\n    setStep(step + 1);\n    setIngredients(ingredients);\n  };\n\n  if (step == 1) {\n    return <Choices handleSubmit={handleSubmitChoices} />;\n  } else if (step == 2) {\n    return <Ingredients handleSubmit={handleSubmitIngredients} />;\n  } else {\n    return (\n      <Results selectedChoices={selectedChoices} ingredients={ingredients} />\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}